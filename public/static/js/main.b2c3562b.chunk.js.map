{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","logo.png","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","LAUNCH_QUERY","withRouter","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","src","logo","alt","style","width","display","margin","exact","path","component","Launch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2c3562b.chunk.js","sourcesContent":["import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n    return <div className=\"card card-body mb-3\">\n        <div className=\"row\">\n            <div className=\"col-md-9\">\n                <h4>Mission: <span className={classNames({\n                    'text-success': launch_success,\n                    'text-danger': !launch_success\n                })}>{mission_name}</span></h4>\n                <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n            </div>\n            <div className=\"col-md-3\">\n                <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n            </div>\n        </div>\n    </div>\n}","import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n            </p>\n        </div>\n    );\n}","import React, { Fragment } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nfunction Launches() {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return <Fragment>\n    <div className=\"display-4 my-3\">Launches</div>\n    <MissionKey />\n    { data.launches.map(launch => (\n        <LaunchItem key={launch.flight_number} launch={launch} />\n    ))}</Fragment>\n  }\n\nexport default Launches","import React, { Component, Fragment } from 'react'\nimport {withRouter, RouterProps} from \"react-router\";\nimport { gql, useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_date_local\n            launch_success\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }     \n        }\n    }\n`\n\nconst Launch = ({ match }) => {\n    let flight_number = match.params.flight_number\n    flight_number = parseInt(flight_number)\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n        variables: {\n          flight_number: flight_number\n        },\n      });\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    const { \n      mission_name, \n      launch_year, \n      launch_success, \n      rocket: {\n        rocket_id, \n        rocket_name, \n        rocket_type\n      }\n    } = data.launch\n    return (\n      <div>\n        <h1 className=\"display-4 my-3\">\n          <span className=\"text-dark\">Mission: {mission_name}</span>\n        </h1>\n        <h4 className=\"mb-3\">Launch Details</h4>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item\">\n            Flight Number: {flight_number}\n          </li>\n          <li className=\"list-group-item\">\n            Launch Year: {launch_year}\n          </li>\n          <li className=\"list-group-item\">\n            Launch Successful: <span className={classNames({\n              'text-success': launch_success, \n              'text-danger': !launch_success\n              })}>{launch_success ? 'Yes' : 'No'}</span>\n          </li>\n        </ul>\n\n        <h4 className=\"mb-3\">Rocket Details</h4>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item\">\n            Rocket Id: {rocket_id}\n          </li>\n          <li className=\"list-group-item\">\n            Rocket Name: {rocket_name}\n          </li>\n          <li className=\"list-group-item\">\n            Rocket Type: {rocket_type}\n          </li>\n        </ul>\n        <hr/>\n        <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n      </div>\n    );\n}\n\nexport default withRouter(Launch);","export default __webpack_public_path__ + \"static/media/logo.2b64d6c2.png\";","import {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launches from \"./components/Launches\"\nimport Launch from \"./components/Launch\";\nimport './App.css';\nimport logo from './logo.png';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto' }} />\n        </div>\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}